{"version":3,"sources":["firebase.js","Login.js","ConcertDetailsPopUp.js","ConcertCard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","handleRadioChange","e","isUserNew","target","value","setState","userNew","userEmailError","userCityError","validateInput","input","field","name","stateError","userName","userEmail","userPassword","userCity","test","className","console","log","handleInputChange","handleSubmit","preventDefault","state","userNameError","userPasswordError","isLoggedIn","isLoggedOn","this","space","onChange","htmlFor","type","id","onClick","Component","ConcertDetailsPopUp","modalEvent","artist","d","newDate","Date","setTime","getTime","toDateString","axios","url","props","match","params","eventID","method","responseType","apikey","locale","segment","then","response","res","data","dateStr","dates","start","localDate","dateFormat","dateConvert","_embedded","attractions","map","art","venue","venues","location","city","country","info","date","status","code","toUpperCase","imgUrl","images","tickets","src","alt","href","ConcertCard","currentCity","event","filteredResults","isFiltered","filterPrice","priceRanges","currency","min","toFixed","max","cityCountry","dateNum","parse","price","collectPrice","filterResults","parseFloat","entry","key","to","eventCopy","filter","segmentName","events","resEvent","mapToAppData","handleChange","showFiltered","renderConcertCell","App","basename","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ebacf3fb.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initalize Firebase\nconst config = {\n\tapiKey: \"AIzaSyBymJrYdY1TNmwZwPPOIY02q6t3EBz3WUU\",\n\tauthDomain: \"concert-accountant-cca1f.firebaseapp.com\",\n\tdatabaseURL: \"https://concert-accountant-cca1f.firebaseio.com\",\n\tprojectId: \"concert-accountant-cca1f\",\n\tstorageBucket: \"concert-accountant-cca1f.appspot.com\",\n\tmessagingSenderId: \"357158929786\",\n\tappId: \"1:357158929786:web:6fefa320d3defb953ec2c3\"\n};\nfirebase.initializeApp(config);\n\n// This exports the configuerd version of firebase\nexport default firebase;","import React, {Component, Fragment} from 'react';\nimport './Login.css'\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoggedOn: false,\n            userNew: true,\n            userName: '',\n            userEmail: '',\n            userPassword: '',\n            userCity: '',\n            userNameError: false,\n            userEmailError: false,\n            userPasswordError: false,\n            userCityError: false\n        }\n    }   \n    handleRadioChange = (e) => {\n        const isUserNew = e.target.value === \"true\" ? true : false;\n            this.setState({\n                userNew: isUserNew,\n                userEmailError: false,\n                userCityError: false\n            })\n    }\n    // on component did mount, grab DB info & list of usernames to toss in state\n    validateInput = (input) => {\n        const field = input.name;\n        const inputRegex = {\n            // username must be between 5 and 10 characters\n            userName: /^[a-z0-9]([._](?![._])|[a-z0-9])[a-z0-9]{3,8}$/,\n            // email must be email format\n            userEmail: /^([a-z0-9_ .-]+)@([\\da-z.-]+)\\.([a-z.]{2,6})$/,\n            // password 6-20 characters\n            userPassword: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n            // city only allows letters, special letter characters, and punctuation regularly found in city names\n            userCity: /^([a-zA-Z\\u0080-\\u024F]+(?:. |-| |'))*[a-zA-Z\\u0080-\\u024F]*$/\n        }\n        const stateError = field + \"Error\";\n        if (inputRegex[field].test(input.value)) {\n            input.className = \"fieldSuccess\";\n            console.log(stateError);\n            this.setState({\n                [stateError]: false\n            })\n            // add function to look through usernames to check for matches if pattern is valid and display new error\n        } else {\n            input.className = \"fieldError\"\n            this.setState({\n                [stateError]: true\n            })\n        }\n    }\n    handleInputChange = (e) => {\n        this.validateInput(e.target);\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.userNameError && !this.state.userEmailError && !this.state.userPasswordError && !this.state.userCityError) {\n            this.setState({\n                isLoggedIn: true\n            })\n            // call function to set App state to show user is logged in\n            // call function to hide landing page\n            // const dbRef = firebase.database().ref();\n            // dbRef.push(this.state); (will be modified to only push the login data)\n        } else {\n            // some sort of notification about fixing \n        }\n    }\n\n  render() {\n    const {userNew, userName, userEmail, userPassword, userCity, userNameError, userEmailError, userPasswordError, userCityError} = this.state\n      const space = <span className=\"form__space\"></span>;\n        return(\n            <div className=\"Form\">\n                <form>\n                    <fieldset onChange={this.handleRadioChange} value={userNew}>\n                        <div className={userNew ? \"form--active radio\" : \"radio\"}>\n                            <label htmlFor=\"signUp\">Sign Up</label>\n                            <input className=\"sr-only\" type=\"radio\" name=\"userNew\" id=\"signUp\" value=\"true\"/>\n                        </div>\n                        <div className={!userNew ? \"form--active radio\" : \"radio\"}>\n                            <label htmlFor=\"logIn\">Log In</label>\n                            <input className=\"sr-only\" type=\"radio\" name=\"userNew\" id=\"logIn\" value=\"false\"/>\n                        </div>\n                    </fieldset>\n                    <div className=\"form__container\">\n                        <label htmlFor=\"userName\">Username</label>\n                        <input onChange={this.handleInputChange} type=\"text\" name=\"userName\" value={userName}/>\n                        {userNameError ? <p>Username must be between 5 and 8 characters</p> : space}\n                        {userNew ? \n                            <Fragment>\n                                <label htmlFor=\"userEmail\">Email address</label>\n                                <input onChange={this.handleInputChange} type=\"email\" name=\"userEmail\" value={userEmail}/>\n                                {userEmailError ? <p>Please enter a valid email address</p> : space}\n                            </Fragment>: \n                            null}\n                        <label htmlFor=\"userPassword\">Password</label>\n                        <input onChange={this.handleInputChange} type=\"password\" name=\"userPassword\" value={userPassword}/>\n                        {userPasswordError ? <p>Password must be between 6 and 8 characters</p> : space}\n                        {userNew ? \n                        <Fragment>\n                            <label htmlFor=\"userCity\">Home city</label>\n                            <input onChange={this.handleInputChange} type=\"text\" name=\"userCity\" id={userCity}/>\n                            {userCityError ? <p>Please remove special characters</p> : space}\n                        </Fragment> :\n                        null}\n                        <button onClick={this.handleSubmit}>{userNew ? \"Sign Up\" : \"Login\"}</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Login;\n","import React, {Component} from \"react\";\nimport axios from 'axios';\nimport \"./ConcertDetailsPopUp.css\";\n\nclass ConcertDetailsPopUp extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\tmodalEvent: {\n\t\t\t\tartist: [],\n\t\t\t},\n\t\t}\n\t}\n\n\tdateConvert(d) {\n\t\tlet newDate = new Date(d);\n\t\t\n\t\tnewDate = new Date(newDate.setTime(newDate.getTime() + 1 * 86400000));\n\n\t\tconst date = newDate.toDateString();\n\n\t\treturn date;\n\t};\n\n\tcomponentDidMount() {\n\t\taxios({\n\t\t\turl: `https://app.ticketmaster.com/discovery/v2/events/${this.props.match.params.eventID}`,\n\t\t\tmethod: \"GET\",\n\t\t\tresponseType: \"JSON\",\n\t\t\tparams: {\n\t\t\t\tapikey: \"Mh0RGGBfkgADAASrXM25WfhUueio9rgV\",\n\t\t\t\tlocale: \"en-us\",\n\t\t\t\tsegment: \"music\",\n\t\t\t}\n\t\t}).then(response => {\t\t\t\n\t\t\tconst res = response.data;\n\t\t\t\n\t\t\tconst dateStr = res.dates.start.localDate;\n\t\t\t// const dateNum = Date.parse(dateStr);\n\t\t\tconst dateFormat = this.dateConvert(dateStr)\n\t\t\t\n\t\t\tconst artist = res._embedded.attractions.map(art => {\n\t\t\t\treturn art.name\n\t\t\t})\n\n\t\t\tthis.setState({\n\t\t\t\tmodalEvent: {\n\t\t\t\t\teventID: res.id, \n\t\t\t\t\tname: res.name, \n\t\t\t\t\tvenue: res._embedded.venues[0].name, \n\t\t\t\t\tlocation: { \n\t\t\t\t\t\tcity: res._embedded.venues[0].city.name, \n\t\t\t\t\t\tcountry: res._embedded.venues[0].country.name,\n\t\t\t\t\t},\n\t\t\t\t\tinfo: res.info,\n\t\t\t\t\t// date: {\n\t\t\t\t\t// \tdateStr,\n\t\t\t\t\t// \tdateNum,\n\t\t\t\t\t// \tdateFormat,\n\t\t\t\t\t// },\n\t\t\t\t\tdate: dateFormat,\n\t\t\t\t\tstatus: (res.dates.status.code).toUpperCase(),\n\t\t\t\t\timgUrl: res.images[0].url,\n\t\t\t\t\ttickets: res.url,\n\t\t\t\t\tartist,\n\t\t\t\t\t// priceRange: {\n\t\t\t\t\t\t// min: res.priceRanges[0].min,\n\t\t\t\t\t\t// max: res.priceRanges[0].max,\n\t\t\t\t\t// },\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"modalContainer\">\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t<div className=\"modalContent\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>{this.state.modalEvent.name}</h1>\n\t\t\t\t\t\t<h2> @ {this.state.modalEvent.venue}</h2>\n\t\t\t\t\t\t<h3>{this.state.modalEvent.date}</h3>\n\n\t\t\t\t\t\t<div className=\"modalImage\">\n\t\t\t\t\t\t\t<img src={this.state.modalEvent.imgUrl} alt={this.state.modalEvent.name}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"modalEvent\">\n\t\t\t\t\t\t<div className=\"modalEventDetails\">\n\t\t\t\t\t\t\t{/* { */}\n\t\t\t\t\t\t\t\t{/* this.state.modalEvent.status === \"CANCELLED\" */}\n\t\t\t\t\t\t\t\t{/* ? <h3>{this.state.modalEvent.status}</h3> : */}\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<h3>{this.state.modalEvent.status}</h3>\n\t\t\t\t\t\t\t\t\t<h3>Tickets start at </h3>\n\t\t\t\t\t\t\t\t\t<h3>Featuring: </h3>\n\t\t\t\t\t\t\t\t\t<ul>\n\n\t\t\t\t\t\t\t\t\t\t{this.state.modalEvent.artist.map(art => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\t\t{art}\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)})}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<h3>{this.state.modalEvent.info}</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"modalButtons\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.modalEvent.status === \"CANCELLED\" \n\t\t\t\t\t\t\t\t? <button>Add to Wishlist</button>\n\t\t\t\t\t\t\t\t: <>\n\t\t\t\t\t\t\t\t\t<button>Add to Wishlist</button>\n\t\t\t\t\t\t\t\t\t<button>Add to List</button>\n\n\t\t\t\t\t\t\t\t\t<a href={this.state.modalEvent.tickets}>\n\t\t\t\t\t\t\t\t\t\t<button>Buy Tickets</button>\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ConcertDetailsPopUp;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport \"./ConcertCard.css\";\n\nclass ConcertCard extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tcurrentCity: \"Toronto\",\n\t\t\tevent: [],\n\t\t\tmodalEvent: \"\",\n\t\t\tfilteredResults: [],\n\t\t\tisFiltered: false,\n\t\t\tfilterPrice: \"0\",\n\t\t};\n\t}\n\n\t// Function to convert date from YYYY-MM-DD format to Weekday Month Day Year format\n\tdateConvert(d) {\n\t\tlet newDate = new Date(d);\n\t\t\n\t\tnewDate = new Date(newDate.setTime(newDate.getTime() + 1 * 86400000));\n\n\t\tconst date = newDate.toDateString();\n\n\t\treturn date;\n\t};\n\n\tcollectPrice (data) {\n\t\tif (data.priceRanges) {\n\t\t\treturn ({\n\t\t\t\ttype: data.priceRanges[0].type,\n\t\t\t\tcurrency: data.priceRanges[0].currency,\n\t\t\t\tmin: `${data.priceRanges[0].min.toFixed(2)}`,\n\t\t\t\tmax: `${data.priceRanges[0].max.toFixed(2)}`,\n\t\t\t\t\n\t\t\t})\n\t\t} else {\n\t\t\treturn ({\n\t\t\t\ttype: false,\n\t\t\t\tcurrency: false,\n\t\t\t\tmin: \"N/A\",\n\t\t\t\tmax: \"N/A\",\n\t\t\t})\n\t\t}\n\t}\n\n\t// Function to parse data\n\tmapToAppData(res)  {\n\t\tconst resEvent = res.map( (data) => {\n\t\t\t// To get ID\n\t\t\tconst eventID = data.id;\n\t\t\t\n\t\t\t// To get the name of the artist\n\t\t\tconst name = data.name;\n\t\t\t\n\t\t\t// To get the venue\n\t\t\tconst venue =  data._embedded.venues[0].name;\n\n\t\t\t// To get city, country, and City, Country combo as some entries will not have a state value (ie: Canada has provinces, not states)\n\t\t\tconst city = data._embedded.venues[0].city.name;\n\t\t\t\n\t\t\tconst country = data._embedded.venues[0].country.name;\n\t\t\t\n\t\t\tconst cityCountry = `${city}, ${country}`;\n\t\t\t\n\t\t\t// To get Date\n\t\t\tconst dateStr = data.dates.start.localDate;\n\n\t\t\tconst dateFormat = this.dateConvert(dateStr);\n\n\t\t\tconst dateNum = Date.parse(dateStr);\n\n\t\t\t// To get image\n\t\t\tconst imgUrl = data.images[2].url;\n\n\t\t\t// Link to purchase tickets\n\t\t\t// const tickets = data.url;\n\n\t\t\t// To get price\n\t\t\tconst price = this.collectPrice(data);\n\n\t\t\t// Return obj to push to this.state.event\n\t\t\treturn ({\n\t\t\t\teventID,\n\t\t\t\tname,\n\t\t\t\tvenue,\n\t\t\t\tlocation: {\n\t\t\t\t\tcity,\n\t\t\t\t\tcountry,\n\t\t\t\t\tcityCountry,\n\t\t\t\t},\n\t\t\t\tdate: {\n\t\t\t\t\tdateStr,\n\t\t\t\t\tdateNum,\n\t\t\t\t\tdateFormat\n\t\t\t\t},\n\t\t\t\timgUrl,\n\t\t\t\t// tickets,\n\t\t\t\tprice,\n\t\t\t});\t\t\n\t\t})\n\t\treturn resEvent;\n\t};\n\n\t// Update this.state.filterPrice on select\n\thandleChange(event) {\n\n\t\tthis.filterResults(event.target.value);\n\n\t\tthis.setState({\n\t\t\tfilterPrice: parseFloat(event.target.value),\n\t\t})\n\t}\n\n\trenderConcertCell(entry) {\n\t\treturn (\n\t\t\t\t\t\n\t\t\t<div key={entry.eventID} className=\"concertCell\">\n\t\t\t\t<div className=\"imageContainer\">\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<Link to={`/concert-accountant/event/${entry.eventID}`}>\n\t\t\t\t\t\t<img src={entry.imgUrl} alt={entry.name} />\n\t\t\t\t\t</Link>\n\n\t\t\t\t</div>\n\t\t\t\t<div className=\"concertInfo\">\n\t\t\t\t\t<h2>{entry.name}</h2>\n\t\t\t\t\t<p>{entry.date.dateFormat}</p>\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tentry.price.min === 'N/A' \n\t\t\t\t\t\t? <p>No prices currently available.</p>\n\t\t\t\t\t\t: <p>Prices starting as low as ${entry.price.min}</p>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tfilterResults() {\n\t\tconst eventCopy = this.state.event;\n\t\tlet price = parseFloat(this.state.filterPrice);\n\n\t\tconst filteredResults = eventCopy.filter((event) => {\n\t\t\t\tconst shouldFilter = parseFloat(event.price.min) <= parseFloat(price)\n\n\t\t\t\treturn shouldFilter\n\t\t})\n\n\t\tthis.setState({\n\t\t\tfilteredResults,\n\t\t})\n\t}\n\n\tshowFiltered() {\n\t\tlet isFiltered = true;\n\n\t\tif (this.state.filterPrice == \"0\") {\n\t\t\tisFiltered = false;\n\t\t} else {\n\t\t\tisFiltered = true;\n\t\t}\n\n\t\tthis.setState({\n\t\t\tisFiltered,\n\t\t})\n\n\t\tthis.filterResults();\n\t}\n\n\tcomponentDidMount() {\n\t\taxios({\n\t\t\turl: \"https://app.ticketmaster.com/discovery/v2/events\",\n\t\t\tmethod: \"GET\",\n\t\t\tresponseType: \"JSON\",\n\t\t\tparams: {\n\t\t\t\tapikey: \"Mh0RGGBfkgADAASrXM25WfhUueio9rgV\",\n\t\t\t\tlocale: \"en-us\",\n\t\t\t\tsegmentName: \"music\",\n\t\t\t\tcity: this.state.currentCity,\n\t\t\t}\n\t\t}).then(response => {\n\t\t\tconst res = response.data._embedded.events;\n\t\t\t\n\t\t\tconst resEvent = this.mapToAppData(res);\n\n\t\t\tthis.setState({\n\t\t\t\tevent: resEvent,\n\t\t\t})\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"wrapper\">\n\t\t\t<div className=\"budgetFilter\">\n\t\t\t\t<p>Filter results for your budget: </p>\n\t\t\t\t<select value={this.state.filterPrice} onChange={(e) => this.handleChange(e)}>\n\t\t\t\t\t<option value=\"0\">All</option>\n\t\t\t\t\t<option value=\"25\">$25 or Less</option>\n\t\t\t\t\t<option value=\"50\">$50 or Less</option>\n\t\t\t\t\t<option value=\"75\">$75 or Less</option>\n\t\t\t\t\t<option value=\"100\">$100 or Less</option>\n\t\t\t\t</select>\n\t\t\t\t<button onClick={(e) => this.showFiltered(e)}>Filter</button>\n\t\t\t</div>\n\t\t\t<div className=\"concertCards\">\n\t\t\t\n\t\t\t{\n\t\t\t\tthis.state.isFiltered === false \n\t\t\t\t? this.state.event.map(event => this.renderConcertCell(event)) \n\t\t\t\t: this.state.filteredResults.map(event => this.renderConcertCell(event)) \n\t\t\t}\n\n\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t\n}}\n\nexport default ConcertCard;","import React, { Component } from 'react';\nimport \"./App.css\";\nimport firebase from './firebase';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Login from './Login';\nimport ConcertDetailsPopUp from './ConcertDetailsPopUp.js';\nimport ConcertCard from './ConcertCard';\n\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\n\t\t\t<Router basename=\"/concert-accountant/\">\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t{/* <Login /> */}\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><Link to=\"/event/\">Events</Link></li>\n\t\t\t\t\t\t<li><Link to=\"/event/:eventID\"></Link></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<Route exact path=\"/\" component={Login} />\n\n\t\t\t\t\t<Route path=\"/event/\" component={ConcertCard} />\n\t\t\t\t\t{/* <ConcertCard /> */}\n\n\t\t\t\t\t{/* Show concert details */}\n\t\t\t\t\t<Route exact path=\"/event/:eventID\" component={ConcertDetailsPopUp} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}